{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/services/file-processing.service.ts","./src/environments/environment.ts","./src/main.ts","./src/polyfills.ts"],"sourcesContent":["<div class=\"container\">\n  <header class=\"header\">\n    <h1>{{ title }}</h1>\n    <p class=\"subtitle\">Secure PHI Redaction for Lab Order Documents</p>\n  </header>\n\n  <main class=\"main-content\">\n    <!-- File Selection Section -->\n    <section class=\"file-selection\">\n      <h2>Select Lab Order Files</h2>\n      <div class=\"file-input-container\">\n        <input \n          type=\"file\" \n          id=\"fileInput\"\n          multiple \n          accept=\".txt\"\n          (change)=\"onFileSelected($event)\"\n          class=\"file-input\"\n        >\n        <label for=\"fileInput\" class=\"file-input-label\">\n          <i class=\"icon\">üìÅ</i>\n          Choose Files\n        </label>\n      </div>\n      \n      <!-- Selected Files Display -->\n      <div *ngIf=\"selectedFiles && selectedFiles.length > 0\" class=\"selected-files\">\n        <h3>Selected Files ({{ selectedFiles.length }})</h3>\n        <ul class=\"file-list\">\n          <li *ngFor=\"let fileName of getSelectedFilesList()\" class=\"file-item\">\n            <i class=\"icon\">üìÑ</i>\n            {{ fileName }}\n          </li>\n        </ul>\n      </div>\n    </section>\n\n    <!-- Action Buttons -->\n    <section class=\"actions\">\n      <button \n        [disabled]=\"!selectedFiles || selectedFiles.length === 0 || isProcessing\"\n        (click)=\"processFiles()\"\n        class=\"btn btn-primary\"\n      >\n        <span *ngIf=\"isProcessing\" class=\"spinner\"></span>\n        {{ isProcessing ? 'Processing...' : 'Process Files' }}\n      </button>\n      \n      <button \n        *ngIf=\"selectedFiles || processingResults\"\n        (click)=\"resetForm()\"\n        class=\"btn btn-secondary\"\n      >\n        Reset\n      </button>\n    </section>\n\n    <!-- Error Message -->\n    <section *ngIf=\"errorMessage\" class=\"error-section\">\n      <div class=\"alert alert-error\">\n        <i class=\"icon\">‚ö†Ô∏è</i>\n        {{ errorMessage }}\n      </div>\n    </section>\n\n    <!-- Processing Results -->\n    <section *ngIf=\"processingResults\" class=\"results-section\">\n      <h2>Processing Results</h2>\n      \n      <div class=\"results-summary\">\n        <div class=\"summary-item\">\n          <span class=\"label\">Total Files:</span>\n          <span class=\"value\">{{ processingResults.totalFiles }}</span>\n        </div>\n        <div class=\"summary-item\">\n          <span class=\"label\">Successful:</span>\n          <span class=\"value success\">{{ processingResults.successfulFiles }}</span>\n        </div>\n        <div class=\"summary-item\">\n          <span class=\"label\">Failed:</span>\n          <span class=\"value error\">{{ processingResults.totalFiles - processingResults.successfulFiles }}</span>\n        </div>\n      </div>\n\n      <div class=\"results-list\">\n        <div \n          *ngFor=\"let result of processingResults.results\" \n          class=\"result-item\"\n          [class.success]=\"result.success\"\n          [class.error]=\"!result.success\"\n        >\n          <div class=\"result-header\">\n            <span class=\"file-name\">{{ result.fileName }}</span>\n            <span class=\"status-icon\">{{ result.success ? '‚úÖ' : '‚ùå' }}</span>\n          </div>\n          \n          <div class=\"result-details\">\n            <p class=\"message\">{{ result.message }}</p>\n            \n            <div *ngIf=\"result.success\" class=\"download-section\">\n              <span class=\"processed-name\">{{ result.processedFileName }}</span>\n              <button \n                (click)=\"downloadFile(result)\"\n                class=\"btn btn-download\"\n              >\n                <i class=\"icon\">üíæ</i>\n                Download\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </main>\n\n  <footer class=\"footer\">\n    <p class=\"security-note\">\n      <i class=\"icon\">üîí</i>\n      All files are processed securely and temporarily. No PHI is stored permanently.\n    </p>\n  </footer>\n</div>\n","import { Component } from '@angular/core';\nimport { FileProcessingService } from './services/file-processing.service';\nimport { ProcessingResult, FileProcessingResult } from './models/processing-result.model';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'PHI Redaction Application';\n  selectedFiles: FileList | null = null;\n  isProcessing = false;\n  processingResults: ProcessingResult | null = null;\n  errorMessage = '';\n\n  constructor(private fileProcessingService: FileProcessingService) {}\n\n  onFileSelected(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    this.selectedFiles = input.files;\n    this.processingResults = null;\n    this.errorMessage = '';\n  }\n\n  async processFiles(): Promise<void> {\n    if (!this.selectedFiles || this.selectedFiles.length === 0) {\n      this.errorMessage = 'Please select files to process';\n      return;\n    }\n\n    this.isProcessing = true;\n    this.errorMessage = '';\n    this.processingResults = null;\n\n    try {\n      this.processingResults = await this.fileProcessingService.processFiles(this.selectedFiles);\n    } catch (error) {\n      this.errorMessage = error instanceof Error ? error.message : 'An error occurred while processing files';\n      console.error('Error processing files:', error);\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  downloadFile(result: FileProcessingResult): void {\n    if (result.success && result.downloadUrl) {\n      this.fileProcessingService.downloadFile(result.downloadUrl, result.processedFileName);\n    }\n  }\n\n  getSelectedFilesList(): string[] {\n    if (!this.selectedFiles) return [];\n    return Array.from(this.selectedFiles).map(file => file.name);\n  }\n\n  resetForm(): void {\n    this.selectedFiles = null;\n    this.processingResults = null;\n    this.errorMessage = '';\n    \n    const fileInput = document.getElementById('fileInput') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.value = '';\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { FileProcessingService } from './services/file-processing.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [\n    FileProcessingService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ProcessingResult } from '../models/processing-result.model';\nimport { lastValueFrom } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FileProcessingService {\n  private readonly apiUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  async processFiles(files: FileList): Promise<ProcessingResult> {\n    const formData = new FormData();\n    \n    for (let i = 0; i < files.length; i++) {\n      formData.append('files', files[i]);\n    }\n\n    try {\n      const response = await lastValueFrom(\n        this.http.post<ProcessingResult>(`${this.apiUrl}/files/process`, formData)\n      );\n      return response;\n    } catch (error) {\n      console.error('Error processing files:', error);\n      \n      if (error instanceof HttpErrorResponse) {\n        if (error.status === 0) {\n          throw new Error('Unable to connect to the server. Please ensure the API is running.');\n        } else if (error.status >= 400 && error.status < 500) {\n          throw new Error(error.error?.message || 'Invalid request. Please check your files and try again.');\n        } else if (error.status >= 500) {\n          throw new Error('Server error occurred. Please try again later.');\n        }\n      }\n      \n      throw new Error('An unexpected error occurred while processing files.');\n    }\n  }\n\n  downloadFile(downloadUrl: string, fileName: string): void {\n    const fullUrl = `${this.apiUrl}${downloadUrl}`;\n    \n    const link = document.createElement('a');\n    link.href = fullUrl;\n    link.download = fileName;\n    link.target = '_blank';\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n}\n","export const environment = {\n  production: false,\n  apiUrl: 'http://localhost:5001/api'\n};\n","import './polyfills';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n */\n\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n"],"names":["i0","AppComponent","constructor","fileProcessingService","onFileSelected","event","input","target","selectedFiles","files","processingResults","errorMessage","processFiles","length","isProcessing","error","Error","message","console","downloadFile","result","success","downloadUrl","processedFileName","getSelectedFilesList","Array","from","map","file","name","resetForm","fileInput","document","getElementById","value","selectors","decls","vars","consts","template","ctx","BrowserModule","HttpClientModule","FileProcessingService","AppModule","bootstrap","imports","declarations","HttpErrorResponse","lastValueFrom","environment","http","apiUrl","formData","FormData","i","append","response","post","status","fileName","fullUrl","link","createElement","href","download","body","appendChild","click","removeChild","factory","providedIn","production","__NgCli_bootstrap_1","bootstrapModule","catch","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}