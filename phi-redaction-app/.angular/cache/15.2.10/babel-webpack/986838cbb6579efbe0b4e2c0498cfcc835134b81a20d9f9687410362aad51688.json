{"ast":null,"code":"import _asyncToGenerator from \"/Users/jordandaake/Desktop/source/PHIRedactionApp/phi-redaction-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FileProcessingService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n  }\n  processFiles(files) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const formData = new FormData();\n      for (let i = 0; i < files.length; i++) {\n        formData.append('files', files[i]);\n      }\n      try {\n        const response = yield lastValueFrom(_this.http.post(`${_this.apiUrl}/files/process`, formData));\n        return response;\n      } catch (error) {\n        console.error('Error processing files:', error);\n        if (error instanceof HttpErrorResponse) {\n          if (error.status === 0) {\n            throw new Error('Unable to connect to the server. Please ensure the API is running.');\n          } else if (error.status >= 400 && error.status < 500) {\n            throw new Error(error.error?.message || 'Invalid request. Please check your files and try again.');\n          } else if (error.status >= 500) {\n            throw new Error('Server error occurred. Please try again later.');\n          }\n        }\n        throw new Error('An unexpected error occurred while processing files.');\n      }\n    })();\n  }\n  downloadFile(downloadUrl, fileName) {\n    const fullUrl = `${this.apiUrl}${downloadUrl}`;\n    const link = document.createElement('a');\n    link.href = fullUrl;\n    link.download = fileName;\n    link.target = '_blank';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n}\nFileProcessingService.ɵfac = function FileProcessingService_Factory(t) {\n  return new (t || FileProcessingService)(i0.ɵɵinject(i1.HttpClient));\n};\nFileProcessingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FileProcessingService,\n  factory: FileProcessingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAqBA,iBAAiB,QAAQ,sBAAsB;AAEpE,SAASC,aAAa,QAAQ,MAAM;AACpC,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,qBAAqB;EAGhCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFP,WAAM,GAAGH,WAAW,CAACI,MAAM;EAEJ;EAElCC,YAAY,CAACC,KAAe;IAAA;IAAA;MAChC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAE/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;QACrCF,QAAQ,CAACI,MAAM,CAAC,OAAO,EAAEL,KAAK,CAACG,CAAC,CAAC,CAAC;;MAGpC,IAAI;QACF,MAAMG,QAAQ,SAASb,aAAa,CAClC,KAAI,CAACI,IAAI,CAACU,IAAI,CAAmB,GAAG,KAAI,CAACT,MAAM,gBAAgB,EAAEG,QAAQ,CAAC,CAC3E;QACD,OAAOK,QAAQ;OAChB,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAE/C,IAAIA,KAAK,YAAYhB,iBAAiB,EAAE;UACtC,IAAIgB,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAIC,KAAK,CAAC,oEAAoE,CAAC;WACtF,MAAM,IAAIH,KAAK,CAACE,MAAM,IAAI,GAAG,IAAIF,KAAK,CAACE,MAAM,GAAG,GAAG,EAAE;YACpD,MAAM,IAAIC,KAAK,CAACH,KAAK,CAACA,KAAK,EAAEI,OAAO,IAAI,yDAAyD,CAAC;WACnG,MAAM,IAAIJ,KAAK,CAACE,MAAM,IAAI,GAAG,EAAE;YAC9B,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;;;QAIrE,MAAM,IAAIA,KAAK,CAAC,sDAAsD,CAAC;;IACxE;EACH;EAEAE,YAAY,CAACC,WAAmB,EAAEC,QAAgB;IAChD,MAAMC,OAAO,GAAG,GAAG,IAAI,CAAClB,MAAM,GAAGgB,WAAW,EAAE;IAE9C,MAAMG,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGJ,OAAO;IACnBC,IAAI,CAACI,QAAQ,GAAGN,QAAQ;IACxBE,IAAI,CAACK,MAAM,GAAG,QAAQ;IAEtBJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACP,IAAI,CAAC;IAC/BA,IAAI,CAACQ,KAAK,EAAE;IACZP,QAAQ,CAACK,IAAI,CAACG,WAAW,CAACT,IAAI,CAAC;EACjC;;;mBA7CWtB,qBAAqB;AAAA;;SAArBA,qBAAqB;EAAAgC,SAArBhC,qBAAqB;EAAAiC,YAFpB;AAAM","names":["HttpErrorResponse","lastValueFrom","environment","FileProcessingService","constructor","http","apiUrl","processFiles","files","formData","FormData","i","length","append","response","post","error","console","status","Error","message","downloadFile","downloadUrl","fileName","fullUrl","link","document","createElement","href","download","target","body","appendChild","click","removeChild","factory","providedIn"],"sourceRoot":"","sources":["/Users/jordandaake/Desktop/source/PHIRedactionApp/phi-redaction-app/src/app/services/file-processing.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ProcessingResult } from '../models/processing-result.model';\nimport { lastValueFrom } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FileProcessingService {\n  private readonly apiUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  async processFiles(files: FileList): Promise<ProcessingResult> {\n    const formData = new FormData();\n    \n    for (let i = 0; i < files.length; i++) {\n      formData.append('files', files[i]);\n    }\n\n    try {\n      const response = await lastValueFrom(\n        this.http.post<ProcessingResult>(`${this.apiUrl}/files/process`, formData)\n      );\n      return response;\n    } catch (error) {\n      console.error('Error processing files:', error);\n      \n      if (error instanceof HttpErrorResponse) {\n        if (error.status === 0) {\n          throw new Error('Unable to connect to the server. Please ensure the API is running.');\n        } else if (error.status >= 400 && error.status < 500) {\n          throw new Error(error.error?.message || 'Invalid request. Please check your files and try again.');\n        } else if (error.status >= 500) {\n          throw new Error('Server error occurred. Please try again later.');\n        }\n      }\n      \n      throw new Error('An unexpected error occurred while processing files.');\n    }\n  }\n\n  downloadFile(downloadUrl: string, fileName: string): void {\n    const fullUrl = `${this.apiUrl}${downloadUrl}`;\n    \n    const link = document.createElement('a');\n    link.href = fullUrl;\n    link.download = fileName;\n    link.target = '_blank';\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}